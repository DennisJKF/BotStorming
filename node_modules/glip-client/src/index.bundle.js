module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Companies = function () {
  function Companies(rc) {
    _classCallCheck(this, Companies);

    this.rc = rc;
  }

  _createClass(Companies, [{
    key: "get",
    value: function get(options) {
      if (options && options.companyId) {
        return this.rc.platform().get(`/glip/companies/${options.companyId}`).then(function (response) {
          return response.json();
        });
      } else {
        return null;
      }
    }
  }]);

  return Companies;
}();

module.exports = Companies;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Groups = function () {
  function Groups(rc) {
    _classCallCheck(this, Groups);

    this.rc = rc;
  }

  _createClass(Groups, [{
    key: 'get',
    value: function get(options) {
      if (options && options.groupId) {
        return this.rc.platform().get(`/glip/groups/${options.groupId}`).then(function (response) {
          return response.json();
        });
      } else {
        return this.rc.platform().get('/glip/groups', options).then(function (response) {
          return response.json();
        });
      }
    }
  }, {
    key: 'post',
    value: function post(options) {
      if (options && options.groupId) {
        return this.rc.platform().post(`/glip/groups/${options.groupId}/bulk-assign`, options).then(function (response) {
          return response.json();
        });
      } else {
        return this.rc.platform().post('/glip/groups', options).then(function (response) {
          return response.json();
        });
      }
    }
  }, {
    key: 'put',
    value: function put(options) {
      return this.rc.platform().put('/glip/groups', options).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'subscribe',
    value: function subscribe(callback) {
      this.subscription = this.rc.createSubscription();
      this.subscription.on(this.subscription.events.notification, function (notification) {
        callback(notification.body);
      });
      this.subscription.setEventFilters(['/restapi/v1.0/account/~/extension/~/glip/groups']).register();
    }
  }]);

  return Groups;
}();

module.exports = Groups;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Persons = function () {
  function Persons(rc) {
    _classCallCheck(this, Persons);

    this.rc = rc;
  }

  _createClass(Persons, [{
    key: "get",
    value: function get(options) {
      if (options && options.personId) {
        return this.rc.platform().get(`/glip/persons/${options.personId}`).then(function (response) {
          return response.json();
        });
      } else {
        return null;
      }
    }
  }]);

  return Persons;
}();

module.exports = Persons;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Posts = function () {
  function Posts(rc) {
    _classCallCheck(this, Posts);

    this.rc = rc;
  }

  _createClass(Posts, [{
    key: 'post',
    value: function post(options) {
      return this.rc.platform().post('/glip/posts', options).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'get',
    value: function get(options) {
      if (options && options.postId) {
        return this.rc.platform().get(`/glip/posts/${options.postId}`).then(function (response) {
          return response.json();
        });
      } else {
        return this.rc.platform().get('/glip/posts', options).then(function (response) {
          return response.json();
        });
      }
    }
  }, {
    key: 'subscribe',
    value: function subscribe(callback) {
      this.subscription = this.rc.createSubscription();
      this.subscription.on(this.subscription.events.notification, function (notification) {
        callback(notification.body);
      });
      this.subscription.setEventFilters(['/restapi/v1.0/account/~/extension/~/glip/posts']).register();
    }
  }]);

  return Posts;
}();

module.exports = Posts;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("ringcentral");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RingCentral = __webpack_require__(4);
var Posts = __webpack_require__(3);
var Groups = __webpack_require__(1);
var Persons = __webpack_require__(2);
var Companies = __webpack_require__(0);

var GlipClient = function () {
  function GlipClient(options) {
    _classCallCheck(this, GlipClient);

    this.rc = new RingCentral(options);
  }

  _createClass(GlipClient, [{
    key: 'authorize',
    value: function authorize(options) {
      return this.rc.platform().login(options);
    }
  }, {
    key: 'posts',
    value: function posts() {
      if (!this._posts) {
        this._posts = new Posts(this.rc);
      }
      return this._posts;
    }
  }, {
    key: 'groups',
    value: function groups() {
      if (!this._groups) {
        this._groups = new Groups(this.rc);
      }
      return this._groups;
    }
  }, {
    key: 'persons',
    value: function persons() {
      if (!this._persons) {
        this._persons = new Persons(this.rc);
      }
      return this._persons;
    }
  }, {
    key: 'companies',
    value: function companies() {
      if (!this._companies) {
        this._companies = new Companies(this.rc);
      }
      return this._companies;
    }
  }]);

  return GlipClient;
}();

module.exports = GlipClient;

/***/ })
/******/ ]);